# coding: utf-8

"""
    ParaTranz OpenAPI 文档

    本文档介绍 ParaTranz.cn 平台的 API ## 获取 Token 首先需要获取API Token，可以通过点击个人资料页面左侧的小钥匙图标获取API Token， 调用 API 时将 Token 直接放在请求头的 Authorization 中即可。  cURL 使用示例:      $ curl --header \"Authorization: XXXXXXXXX\" https://paratranz.cn/api/projects  ## 错误处理 API 返回的错误格式如下      {       \"message\": \"ERROR MESSAGE\", // 错误消息       \"code\": 10000 // 5位错误代码，注意与下面的HTTP状态码区分，部分接口不返回     }  HTTP状态码有以下几种类型   * 400 - 调用参数错误   * 401 - Token 错误或过期   * 403 - 没有相关权限   * 404 - 资源不存在   * 405 - 没有相关HTTP方法，一般为调用方法错误   * 500 - 服务器错误，一般会提供具体出错的位置，请发送给站长方便定位问题   * 502 - 服务器无响应，部分用户被墙时可能会遇到   * 503 - 服务不可用   * 504 - 服务超时，访问量大时会出现  ## 获取 JSON 格式的 API 文档 本文档遵循 OpenAPI 规范，如果您希望获取 JSON 格式的文档，可[点击此处](/api-docs?raw=1) ## 更新历史   * v0.3.1 - 2022.10.17 更改 tag 为英语，便于生成 SDK   * v0.3.0 - 2022.10.16 增加术语历史记录接口说明，调整历史记录接口字段; 增加文档中 operationId 定义;                         修复项目信息相关接口格式定义; 增加 JSON 格式文档入口   * v0.2.1 - 2022.07.23 增加成员贡献接口文档; 完善列表接口数据结构   * v0.2.0 - 2022.06.15 增加讨论及私信相关接口文档   * v0.1.3 - 2022.03.10 增加历史记录相关接口文档   * v0.1.2 - 2022.02.07 完善词条搜索接口 query 参数说明   * v0.1.1 - 2022.01.17 增加文件历史相关接口文档   * v0.1.0 - 2022.01.12 初次发布   # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Contact: master@mail.paratranz.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paratranz_client import schemas  # noqa: F401


class History(
    schemas.AnyTypeSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    词条历史记录
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            createdAt = schemas.DateTimeSchema
            field = schemas.StrSchema
        
            @staticmethod
            def uid() -> typing.Type['UserId']:
                return UserId
            tid = schemas.IntSchema
            _from = schemas.StrSchema
            to = schemas.StrSchema
            
            
            class target(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        key = schemas.StrSchema
                        original = schemas.StrSchema
                        translation = schemas.StrSchema
                        stage = schemas.IntSchema
                        __annotations__ = {
                            "key": key,
                            "original": original,
                            "translation": translation,
                            "stage": stage,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["key"]) -> MetaOapg.properties.key: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["original"]) -> MetaOapg.properties.original: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["translation"]) -> MetaOapg.properties.translation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["key", "original", "translation", "stage", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union[MetaOapg.properties.key, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["original"]) -> typing.Union[MetaOapg.properties.original, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["translation"]) -> typing.Union[MetaOapg.properties.translation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["stage"]) -> typing.Union[MetaOapg.properties.stage, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["key", "original", "translation", "stage", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    key: typing.Union[MetaOapg.properties.key, str, schemas.Unset] = schemas.unset,
                    original: typing.Union[MetaOapg.properties.original, str, schemas.Unset] = schemas.unset,
                    translation: typing.Union[MetaOapg.properties.translation, str, schemas.Unset] = schemas.unset,
                    stage: typing.Union[MetaOapg.properties.stage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'target':
                    return super().__new__(
                        cls,
                        *args,
                        key=key,
                        original=original,
                        translation=translation,
                        stage=stage,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class operation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "translate": "TRANSLATE",
                        "edit": "EDIT",
                        "reset": "RESET",
                        "dispute": "DISPUTE",
                        "review": "REVIEW",
                        "rollback": "ROLLBACK",
                        "lock": "LOCK",
                        "hide": "HIDE",
                    }
                
                @schemas.classproperty
                def TRANSLATE(cls):
                    return cls("translate")
                
                @schemas.classproperty
                def EDIT(cls):
                    return cls("edit")
                
                @schemas.classproperty
                def RESET(cls):
                    return cls("reset")
                
                @schemas.classproperty
                def DISPUTE(cls):
                    return cls("dispute")
                
                @schemas.classproperty
                def REVIEW(cls):
                    return cls("review")
                
                @schemas.classproperty
                def ROLLBACK(cls):
                    return cls("rollback")
                
                @schemas.classproperty
                def LOCK(cls):
                    return cls("lock")
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
            __annotations__ = {
                "id": id,
                "createdAt": createdAt,
                "field": field,
                "uid": uid,
                "tid": tid,
                "from": _from,
                "to": to,
                "target": target,
                "operation": operation,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> 'UserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tid"]) -> MetaOapg.properties.tid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target"]) -> MetaOapg.properties.target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "createdAt", "field", "uid", "tid", "from", "to", "target", "operation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> typing.Union[MetaOapg.properties.field, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union['UserId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tid"]) -> typing.Union[MetaOapg.properties.tid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target"]) -> typing.Union[MetaOapg.properties.target, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union[MetaOapg.properties.operation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "createdAt", "field", "uid", "tid", "from", "to", "target", "operation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        field: typing.Union[MetaOapg.properties.field, str, schemas.Unset] = schemas.unset,
        uid: typing.Union['UserId', schemas.Unset] = schemas.unset,
        tid: typing.Union[MetaOapg.properties.tid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, str, schemas.Unset] = schemas.unset,
        target: typing.Union[MetaOapg.properties.target, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        operation: typing.Union[MetaOapg.properties.operation, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'History':
        return super().__new__(
            cls,
            *args,
            id=id,
            createdAt=createdAt,
            field=field,
            uid=uid,
            tid=tid,
            to=to,
            target=target,
            operation=operation,
            _configuration=_configuration,
            **kwargs,
        )

from paratranz_client.model.user_id import UserId

# coding: utf-8

"""
    ParaTranz OpenAPI 文档

    本文档介绍 ParaTranz.cn 平台的 API ## 获取 Token 首先需要获取API Token，可以通过点击个人资料页面左侧的小钥匙图标获取API Token， 调用 API 时将 Token 直接放在请求头的 Authorization 中即可。  cURL 使用示例:      $ curl --header \"Authorization: XXXXXXXXX\" https://paratranz.cn/api/projects  ## 错误处理 API 返回的错误格式如下      {       \"message\": \"ERROR MESSAGE\", // 错误消息       \"code\": 10000 // 5位错误代码，注意与下面的HTTP状态码区分，部分接口不返回     }  HTTP状态码有以下几种类型   * 400 - 调用参数错误   * 401 - Token 错误或过期   * 403 - 没有相关权限   * 404 - 资源不存在   * 405 - 没有相关HTTP方法，一般为调用方法错误   * 500 - 服务器错误，一般会提供具体出错的位置，请发送给站长方便定位问题   * 502 - 服务器无响应，部分用户被墙时可能会遇到   * 503 - 服务不可用   * 504 - 服务超时，访问量大时会出现  ## 获取 JSON 格式的 API 文档 本文档遵循 OpenAPI 规范，如果您希望获取 JSON 格式的文档，可[点击此处](/api-docs?raw=1) ## 更新历史   * v0.3.1 - 2022.10.17 更改 tag 为英语，便于生成 SDK   * v0.3.0 - 2022.10.16 增加术语历史记录接口说明，调整历史记录接口字段; 增加文档中 operationId 定义;                         修复项目信息相关接口格式定义; 增加 JSON 格式文档入口   * v0.2.1 - 2022.07.23 增加成员贡献接口文档; 完善列表接口数据结构   * v0.2.0 - 2022.06.15 增加讨论及私信相关接口文档   * v0.1.3 - 2022.03.10 增加历史记录相关接口文档   * v0.1.2 - 2022.02.07 完善词条搜索接口 query 参数说明   * v0.1.1 - 2022.01.17 增加文件历史相关接口文档   * v0.1.0 - 2022.01.12 初次发布   # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Contact: master@mail.paratranz.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paratranz_client import schemas  # noqa: F401


class Project(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    项目
    """


    class MetaOapg:
        
        class properties:
            
            
            class id(
                schemas.IntSchema
            ):
                pass
            createdAt = schemas.DateTimeSchema
            updatedAt = schemas.DateTimeSchema
            uid = schemas.IntSchema
            name = schemas.StrSchema
            logo = schemas.StrSchema
            desc = schemas.StrSchema
            source = schemas.StrSchema
            dest = schemas.StrSchema
            members = schemas.IntSchema
            game = schemas.IntSchema
            license = schemas.StrSchema
            activeLevel = schemas.NumberSchema
            stage = schemas.IntSchema
            privacy = schemas.IntSchema
            download = schemas.IntSchema
            issueMode = schemas.IntSchema
            reviewMode = schemas.IntSchema
            joinMode = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "uid": uid,
                "name": name,
                "logo": logo,
                "desc": desc,
                "source": source,
                "dest": dest,
                "members": members,
                "game": game,
                "license": license,
                "activeLevel": activeLevel,
                "stage": stage,
                "privacy": privacy,
                "download": download,
                "issueMode": issueMode,
                "reviewMode": reviewMode,
                "joinMode": joinMode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desc"]) -> MetaOapg.properties.desc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> MetaOapg.properties.source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dest"]) -> MetaOapg.properties.dest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["members"]) -> MetaOapg.properties.members: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["game"]) -> MetaOapg.properties.game: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeLevel"]) -> MetaOapg.properties.activeLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stage"]) -> MetaOapg.properties.stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download"]) -> MetaOapg.properties.download: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueMode"]) -> MetaOapg.properties.issueMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewMode"]) -> MetaOapg.properties.reviewMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joinMode"]) -> MetaOapg.properties.joinMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "createdAt", "updatedAt", "uid", "name", "logo", "desc", "source", "dest", "members", "game", "license", "activeLevel", "stage", "privacy", "download", "issueMode", "reviewMode", "joinMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desc"]) -> typing.Union[MetaOapg.properties.desc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union[MetaOapg.properties.source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dest"]) -> typing.Union[MetaOapg.properties.dest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["members"]) -> typing.Union[MetaOapg.properties.members, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["game"]) -> typing.Union[MetaOapg.properties.game, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> typing.Union[MetaOapg.properties.license, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeLevel"]) -> typing.Union[MetaOapg.properties.activeLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stage"]) -> typing.Union[MetaOapg.properties.stage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> typing.Union[MetaOapg.properties.privacy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download"]) -> typing.Union[MetaOapg.properties.download, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueMode"]) -> typing.Union[MetaOapg.properties.issueMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewMode"]) -> typing.Union[MetaOapg.properties.reviewMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joinMode"]) -> typing.Union[MetaOapg.properties.joinMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "createdAt", "updatedAt", "uid", "name", "logo", "desc", "source", "dest", "members", "game", "license", "activeLevel", "stage", "privacy", "download", "issueMode", "reviewMode", "joinMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        desc: typing.Union[MetaOapg.properties.desc, str, schemas.Unset] = schemas.unset,
        source: typing.Union[MetaOapg.properties.source, str, schemas.Unset] = schemas.unset,
        dest: typing.Union[MetaOapg.properties.dest, str, schemas.Unset] = schemas.unset,
        members: typing.Union[MetaOapg.properties.members, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        game: typing.Union[MetaOapg.properties.game, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        license: typing.Union[MetaOapg.properties.license, str, schemas.Unset] = schemas.unset,
        activeLevel: typing.Union[MetaOapg.properties.activeLevel, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        stage: typing.Union[MetaOapg.properties.stage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        privacy: typing.Union[MetaOapg.properties.privacy, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        download: typing.Union[MetaOapg.properties.download, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issueMode: typing.Union[MetaOapg.properties.issueMode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        reviewMode: typing.Union[MetaOapg.properties.reviewMode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        joinMode: typing.Union[MetaOapg.properties.joinMode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *args,
            id=id,
            createdAt=createdAt,
            updatedAt=updatedAt,
            uid=uid,
            name=name,
            logo=logo,
            desc=desc,
            source=source,
            dest=dest,
            members=members,
            game=game,
            license=license,
            activeLevel=activeLevel,
            stage=stage,
            privacy=privacy,
            download=download,
            issueMode=issueMode,
            reviewMode=reviewMode,
            joinMode=joinMode,
            _configuration=_configuration,
            **kwargs,
        )
